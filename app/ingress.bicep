@description('The kube config for the target Kubernetes cluster.')
@secure()
param kubeConfig string = '' // << fixed – real value, no uniqueString()

 
extension kubernetes with {
  kubeConfig: kubeConfig
  namespace: 'default'
}
 
resource ingress 'networking.k8s.io/Ingress@v1' = {
  metadata: {
    name: 'frontend'
  }
  spec: {
    ingressClassName: 'webapprouting.kubernetes.azure.com'  // new class
    rules: [
      {
        http: {
          paths: [
            {
              path: '/'
              pathType: 'Prefix'
              backend: {
                service: {
                  name: 'frontend'
                  port: { number: 80 }
                }
              }
            }
          ]
        }
      }
    ]
  }
}
